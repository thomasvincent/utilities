"""Client-side stubs for the Zenoss JSON API.

This code was generated by gencode.py and should not be modified."""

import urllib
import urllib2
import json
import socket
import ssl
import httplib

DEFAULT_PROTOCOL = "http"
DEFAULT_HOST = "192.168.171.128"
DEFAULT_PORT = "8080"
DEFAULT_USERNAME = "admin"
DEFAULT_PASSWORD = "zenoss"

class ZenJsonClientError(Exception):
    pass

class Response(object):
    """A response to a query of the Zenoss JSON API
    
        action: The action (aka router) that was invoked (e.g. DeviceRouter)

        method: The method that was invoked (e.g. getDevices)

        result: a dictionary containing the result of the query. The keys of
                this dictionary depend on the action and method that was 
                called. Typically result["success"] will be True for a
                successful query and False for an unsuccessful query. For
                unsuccessful queries, typically, result["msg"] will contain an
                error message.

        tid:    the transaction ID which can be used to match up the query
                with the response

        type_:   always "rpc" for remote procedure call

        uuid:   a universally unique identifier
    """

    action = None
    method = None
    result = None
    tid = None
    type_ = None
    uuid = None

    def __init__(self, action, method, result, tid, type_, uuid):
        self.action = action
        self.method = method
        self.result = result
        self.tid = tid
        self.type_ = type_
        self.uuid = uuid

    def __repr__(self):
        from pprint import pformat
        return "<zenjsonclient.Response(action={action},\n" \
               "                        method={method},\n" \
               "                        tid={tid},\n" \
               "                        type_={type_},\n" \
               "                        uuid={uuid},\n" \
               "                        result=\n{result},\n" \
               ")>".format(action=self.action,
                           method=self.method,
                           tid=self.tid,
                           type_=self.type_,
                           uuid=self.uuid,
                           result=pformat(self.result),
                          )

def create_response(dct):
    if "type" in dct:
        dct["type_"] = dct["type"]
        del dct["type"]
    resp_attrs = (a for a in dir(Response) if not a.startswith("_"))
    for attr in resp_attrs:
        if attr not in dct:
            return dct
    return Response(**dct)

class Client(object):

    def __init__(self, protocol=DEFAULT_PROTOCOL, host=DEFAULT_HOST, port=DEFAULT_PORT, username=DEFAULT_USERNAME, password=DEFAULT_PASSWORD):
        self.protocol = protocol if (protocol is not None) else DEFAULT_PROTOCOL
        self.host = host if (host is not None) else DEFAULT_HOST
        self.port = port if (port is not None) else DEFAULT_PORT
        self.username = username if (username is not None) else DEFAULT_USERNAME
        self.password = password if (password is not None) else DEFAULT_PASSWORD
        self.base_url = "{0}://{1}:{2}".format(self.protocol, self.host, self.port)
        self.opener = None

    def open(self, url, data):
        try:
            return self.opener.open(url, data)
        except urllib2.URLError as e:
            self.opener = None
            if e.args:
                embedded_error = e.args[0]
                if isinstance(embedded_error, ssl.SSLError):
                    raise ZenJsonClientError(str(embedded_error).split(":")[-1].strip())
                elif isinstance(embedded_error, (socket.gaierror, socket.error)):
                    raise ZenJsonClientError(str(embedded_error.args[1]))
                else:
                    raise ZenJsonClientError(str(embedded_error))
            else:
                raise ZenJsonClientError(str(e))
        except httplib.InvalidURL as e:
            self.opener = None
            raise ZenJsonClientError(str(e))

    def login(self):
        self.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
        loginParams = urllib.urlencode(dict(__ac_name = self.username,
                                            __ac_password = self.password,
                                            submitted = "true",
                                            came_from = "{0}/zport/dmd/".format(self.base_url)))
        url = "{0}/zport/acl_users/cookieAuthHelper/login".format(self.base_url)
        self.open(url, loginParams)
        self.tid = 1

    def make_request(self, url_path, action, method, data=[]):
        if self.opener is None:
            self.login()
            assert self.opener is not None
        req = urllib2.Request("{0}/zport/dmd/{1}".format(self.base_url, url_path))
        req.add_header('Content-type', 'application/json; charset=utf-8')
        req_data = json.dumps([dict(action=action, method=method, data=data, type='rpc', tid=self.tid,)])
        resp = self.open(req, req_data)
        json_str = resp.read()
        try:
            json_obj = json.loads(json_str)

        except ValueError:
            self.opener = None
            raise ZenJsonClientError("Could not authenticate to Zenoss instance or wrong port.")

        self.tid += 1
        return json_obj

client = Client()

class RouterContainer(object):
    pass

router = RouterContainer()

class ZenPackRouter(object):

    url_path = "zenpack_router"

    def addToZenPack(self, topack, zenpack):
        """
        
        Add an object to a ZenPack.

        @type  topack: string
        @param topack: Unique ID of the object to add to ZenPack
        @type  zenpack: string
        @param zenpack: Unique ID of the ZenPack to add object to
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ZenPackRouter", "addToZenPack", [data])
        return create_response(resp)

    def getEligiblePacks(self, **data):
        """
        
        Get a list of eligible ZenPacks to add to.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - packs: ([dictionary]) List of objects representing ZenPacks
             - totalCount: (integer) Total number of eligible ZenPacks
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ZenPackRouter", "getEligiblePacks", [data])
        return create_response(resp)

router.zenpack = ZenPackRouter()

class DeviceRouter(object):

    url_path = "device_router"

    def addDevice(self, deviceName, deviceClass, title=None, snmpCommunity='', snmpPort=161, model=False, collector='localhost', rackSlot=0, locationPath='', systemPaths=[], groupPaths=[], productionState=1000, comments='', hwManufacturer='', hwProductName='', osManufacturer='', osProductName='', priority=3, tag='', serialNumber=''):
        """
        
        Add a device.

        @type  deviceName: string
        @param deviceName: Name or IP of the new device
        @type  deviceClass: string
        @param deviceClass: The device class to add new device to
        @type  title: string
        @param title: (optional) The title of the new device (default: '')
        @type  snmpCommunity: string
        @param snmpCommunity: (optional) A specific community string to use for
                              this device. (default: '')
        @type  snmpPort: integer
        @param snmpPort: (optional) SNMP port on new device (default: 161)
        @type  locationPath: string
        @param locationPath: (optional) Organizer path of the location for this device
        @type  systemPaths: List (strings)
        @param systemPaths: (optional) List of organizer paths for the device
        @type  groupPaths: List (strings)
        @param groupPaths: (optional) List of organizer paths for the device
        @type  model: boolean
        @param model: (optional) True to model device at add time (default: False)
        @type  collector: string
        @param collector: (optional) Collector to use for new device (default:
                          localhost)
        @type  rackSlot: string
        @param rackSlot: (optional) Rack slot description (default: '')
        @type  productionState: integer
        @param productionState: (optional) Production state of the new device
                                (default: 1000)
        @type  comments: string
        @param comments: (optional) Comments on this device (default: '')
        @type  hwManufacturer: string
        @param hwManufacturer: (optional) Hardware manufacturer name (default: '')
        @type  hwProductName: string
        @param hwProductName: (optional) Hardware product name (default: '')
        @type  osManufacturer: string
        @param osManufacturer: (optional) OS manufacturer name (default: '')
        @type  osProductName: string
        @param osProductName: (optional) OS product name (default: '')
        @type  priority: integer
        @param priority: (optional) Priority of this device (default: 3)
        @type  tag: string
        @param tag: (optional) Tag number of this device (default: '')
        @type  serialNumber: string
        @param serialNumber: (optional) Serial number of this device (default: '')
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - jobId: (string) ID of the add device job
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "addDevice", [data])
        return create_response(resp)

    def addLocalTemplate(self, deviceUid, templateId):
        """
        
        Adds a local template on a device.

        @type  deviceUid: string
        @param deviceUid: Device uid to have local template
        @type  templateId: string
        @param templateId: Name of the new template
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "addLocalTemplate", [data])
        return create_response(resp)

    def addLocationNode(self, type, contextUid, id, description=None, address=None):
        """
        
        Adds a new location organizer specified by the parameter id to
        the parent organizer specified by contextUid.

        contextUid must be a path to a Location.

        @type  type: string
        @param type: Node type (always 'organizer' in this case)
        @type  contextUid: string
        @param contextUid: Path to the location organizer that will
               be the new node's parent (ex. /zport/dmd/Devices/Locations)
        @type  id: string
        @param id: The identifier of the new node
        @type  description: string
        @param description: (optional) Describes the new location
        @type  address: string
        @param address: (optional) Physical address of the new location
        @rtype:   dictionary
        @return:  B{Properties}:
           - success: (bool) Success of node creation
           - nodeConfig: (dictionary) The new location's properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "addLocationNode", [data])
        return create_response(resp)

    def addNode(self, type, contextUid, id, description=None):
        """
        
        Add a node to the existing tree underneath the node specified
        by the context UID

        @type  type: string
        @param type: Either 'class' or 'organizer'
        @type  contextUid: string
        @param contextUid: Path to the node that will
                           be the new node's parent (ex. /zport/dmd/Devices)
        @type  id: string
        @param id: Identifier of the new node, must be unique in the
                   parent context
        @type  description: string
        @param description: (optional) Describes this new node (default: None)
        @rtype:   dictionary
        @return:  Marshaled form of the created node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "asyncGetTree", [data])
        return create_response(resp)

    def bindOrUnbindTemplate(self, uid, templateUid):
        """
        
        Bind an unbound template or unbind a bound template from a device.

        @type  uid: string
        @param uid: Device uid to bind/unbind template
        @type  templateUid: string
        @param templateUid: Template uid to bind/unbind
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "bindOrUnbindTemplate", [data])
        return create_response(resp)

    def clearGeocodeCache(self):
        """
        
        Clear the Google Maps geocode cache.

        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "clearGeocodeCache", [data])
        return create_response(resp)

    def deleteComponents(self, uids, hashcheck, uid=None, ranges=(), meta_type=None, keys=None, start=0, limit=50, sort='name', dir='ASC', name=None):
        """
        
        Delete device component(s).

        @type  uids: [string]
        @param uids: List of component uids to delete
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the components (from getComponents())
        @type  uid: string
        @param uid: (optional) Device to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to retrieve
                          (default: None)
        @type  keys: [string]
        @param keys: not used
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: string
        @param name: (optional) Component name to search for when loading ranges
                     (default: None)
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "deleteComponents", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Deletes a node from the tree.

        B{NOTE}: You can not delete a root node of a tree

        @type  uid: string
        @param uid: Unique identifier of the node we wish to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - msg: (string) Status message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "deleteNode", [data])
        return create_response(resp)

    def deleteZenProperty(*args, **kwargs):
        """
        
        Removes the local instance of the each property in properties. Note
        that the property will only be deleted if a hasProperty is true
        @type  uid: String
        @param uid: unique identifier of an object
        @type  zProperty: String
        @param zProperty: zenproperty identifier
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "deleteZenProperty", [data])
        return create_response(resp)

    def findComponentIndex(self, componentUid, uid=None, meta_type=None, sort='name', dir='ASC', name=None, **kwargs):
        """
        
        Given a component uid and the component search criteria, this retrieves
        the position of the component in the results.

        @type  componentUid: string
        @param componentUid: Unique identifier of the component whose index
                             to return
        @type  uid: string
        @param uid: Unique identifier of the device queried for components
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to retrieve
                          (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: regex
        @param name: (optional) Used to filter the results (default: None)
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - index: (integer) Index of the component
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "findComponentIndex", [data])
        return create_response(resp)

    def getBoundTemplates(self, uid):
        """
        
        Get a list of bound templates for a device.

        @type  uid: string
        @param uid: Device uid to query for templates
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getBoundTemplates", [data])
        return create_response(resp)

    def getCollectors(self):
        """
        
        Get a list of available collectors.

        @rtype:   [string]
        @return:  List of collectors
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getCollectors", [data])
        return create_response(resp)

    def getComponentTree(self, uid=None, id=None):
        """
        
        Retrieves all of the components set up to be used in a
        tree.

        @type  uid: string
        @param uid: Unique identifier of the root of the tree to retrieve
        @type  id: string
        @param id: not used
        @rtype:   [dictionary]
        @return:  Component properties in tree form
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getComponentTree", [data])
        return create_response(resp)

    def getComponents(self, uid=None, meta_type=None, keys=None, start=0, limit=50, sort='name', dir='ASC', name=None):
        """
        
        Retrieves all of the components at a given UID. This method
        allows for pagination.

        @type  uid: string
        @param uid: Unique identifier of the device whose components are
                    being retrieved
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to be
                          retrieved (default: None)
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
                     (default: None)
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results;
                     (default: 'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: regex
        @param name: (optional) Used to filter the results (default: None)
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - data: (dictionary) The components returned
           - totalCount: (integer) Number of items returned
           - hash: (string) Hashcheck of the current component state (to check
           whether components have changed since last query)
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getComponents", [data])
        return create_response(resp)

    def getDeviceClasses(self, **data):
        """
        
        Get a list of all device classes.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - deviceClasses: ([dictionary]) List of device classes
             - totalCount: (integer) Total number of device classes
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getDeviceClasses", [data])
        return create_response(resp)

    def getDeviceUuidsByName(self, query=''):
        """
        
        Retrieves a list of device uuids. For use in combos.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getDeviceUuidsByName", [data])
        return create_response(resp)

    def getDevices(self, uid=None, start=0, params={}, limit=50, sort='titleOrId', dir='ASC', keys=None):
        """
        
        Retrieves a list of devices. This method supports pagination.

        @type  uid: string
        @param uid: Unique identifier of the organizer to get devices from
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - devices: (list) Dictionaries of device properties
             - totalCount: (integer) Number of devices returned
             - hash: (string) Hashcheck of the current device state (to check
             whether devices have changed since last query)
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getDevices", [data])
        return create_response(resp)

    def getEvents(self, uid):
        """
        
        Get events for a device.

        @type  uid: [string]
        @param uid: Device to get events for
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of events for a device
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getEvents", [data])
        return create_response(resp)

    def getForm(self, uid):
        """
        
        Given an object identifier, this returns all of the editable fields
        on that object as well as their ExtJs xtype that one would
        use on a client side form.

        @type  uid: string
        @param uid: Unique identifier of an object
        @rtype:   DirectResponse
        @return:  B{Properties}
           - form: (dictionary) form fields for the object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getForm", [data])
        return create_response(resp)

    def getGraphDefs(self, uid, drange=None):
        """
        
        Returns the url and title for each graph
        for the object passed in.
        @type  uid: string
        @param uid: unique identifier of an object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getGraphDefs", [data])
        return create_response(resp)

    def getGroups(self, **data):
        """
        
        Get a list of all groups.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - systems: ([dictionary]) List of groups
             - totalCount: (integer) Total number of groups
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getGroups", [data])
        return create_response(resp)

    def getHardwareProductNames(self, manufacturer='', **data):
        """
        
        Get a list of all hardware product names from a manufacturer.

        @type  manufacturer: string
        @param manufacturer: Manufacturer name
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - productNames: ([dictionary]) List of hardware product names
             - totalCount: (integer) Total number of hardware product names
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getHardwareProductNames", [data])
        return create_response(resp)

    def getInfo(self, uid, keys=None):
        """
        
        Get the properties of a device or device organizer

        @type  uid: string
        @param uid: Unique identifier of an object
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
                     (default: None)
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object properties
            - disabled: (bool) If current user doesn't have permission to use setInfo
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getInfo", [data])
        return create_response(resp)

    def getLocalTemplates(self, query, uid):
        """
        
        Get a list of locally defined templates on a device.

        @type  query: string
        @param query: not used
        @type  uid: string
        @param uid: Device uid to query for templates
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing local templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getLocalTemplates", [data])
        return create_response(resp)

    def getLocations(self, **data):
        """
        
        Get a list of all locations.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - systems: ([dictionary]) List of locations
             - totalCount: (integer) Total number of locations
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getLocations", [data])
        return create_response(resp)

    def getManufacturerNames(self, **data):
        """
        
        Get a list of all manufacturer names.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - manufacturers: ([dictionary]) List of manufacturer names
             - totalCount: (integer) Total number of manufacturer names
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getManufacturerNames", [data])
        return create_response(resp)

    def getModelerPluginDocStrings(self, uid):
        """
        
        Given a uid returns the documentation for all the modeler plugins.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getModelerPluginDocStrings", [data])
        return create_response(resp)

    def getOSProductNames(self, manufacturer='', **data):
        """
        
        Get a list of all OS product names from a manufacturer.

        @type  manufacturer: string
        @param manufacturer: Manufacturer name
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - productNames: ([dictionary]) List of OS product names
             - totalCount: (integer) Total number of OS product names
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getOSProductNames", [data])
        return create_response(resp)

    def getOverridableTemplates(self, query, uid):
        """
        
        Get a list of available templates on a device that can be overridden.

        @type  query: string
        @param query: not used
        @type  uid: string
        @param uid: Device to query for overridable templates
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getOverridableTemplates", [data])
        return create_response(resp)

    def getPriorities(self, **kwargs):
        """
        
        Get a list of available device priorities.

        @rtype:   [dictionary]
        @return:  List of name/value pairs of available device priorities
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getPriorities", [data])
        return create_response(resp)

    def getProductionStates(self, **kwargs):
        """
        
        Get a list of available production states.

        @rtype:   [dictionary]
        @return:  List of name/value pairs of available production states
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getProductionStates", [data])
        return create_response(resp)

    def getSystems(self, **data):
        """
        
        Get a list of all systems.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - systems: ([dictionary]) List of systems
             - totalCount: (integer) Total number of systems
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getSystems", [data])
        return create_response(resp)

    def getTemplates(self, id):
        """
        
        Get a list of available templates for a device.

        @type  id: string
        @param id: Device uid to query for templates
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getTemplates", [data])
        return create_response(resp)

    def getTree(self, id):
        """
        
        Returns the tree structure of an organizer hierarchy where
        the root node is the organizer identified by the id parameter.

        @type  id: string
        @param id: Id of the root node of the tree to be returned
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getTree", [data])
        return create_response(resp)

    def getUnboundTemplates(self, uid):
        """
        
        Get a list of unbound templates for a device.

        @type  uid: string
        @param uid: Device uid to query for templates
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getUnboundTemplates", [data])
        return create_response(resp)

    def getUserCommands(self, uid):
        """
        
        Get a list of user commands for a device uid.

        @type  uid: string
        @param uid: Device to use to get user commands
        @rtype:   [dictionary]
        @return:  List of objects representing user commands
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getUserCommands", [data])
        return create_response(resp)

    def getZenProperties(self, uid, start=0, params='{}', limit=None, sort=None, dir='ASC'):
        """
        
        Returns the definition and values of all
        the zen properties for this context
        @type  uid: string
        @param uid: unique identifier of an object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getZenProperties", [data])
        return create_response(resp)

    def getZenProperty(self, uid, zProperty):
        """
        
        Returns information about a zproperty for a
        given context, including its value
        @rtype:   Dictionary
        @return:  B{Properties}:
             - path: (string) where the property is defined
             - type: (string) type of zproperty it is
             - options: (Array) available options for the zproperty
             - value (Array) value of the zproperty
             - valueAsString (string)
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "getZenProperty", [data])
        return create_response(resp)

    def loadComponentRanges(self, ranges, hashcheck, uid=None, types=(), meta_type=(), start=0, limit=None, sort='name', dir='ASC', name=None):
        """
        
        Get a range of component uids.

        @type  ranges: [integer]
        @param ranges: List of two integers that are the min/max values of a
                       range of uids
        @type  hashcheck: string
        @param hashcheck: not used
        @type  uid: string
        @param uid: (optional) Device to use to get uids (default: None)
        @type  types: [string]
        @param types: (optional) The types of components to retrieve (default: None)
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to retrieve
                          (default: None)
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: string
        @param name: (optional) Component name to search for when loading ranges
                     (default: None)
        @rtype:   [string]
        @return:  A list of component uids
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "loadComponentRanges", [data])
        return create_response(resp)

    def loadRanges(self, ranges, hashcheck, uid=None, params=None, sort='name', dir='ASC'):
        """
        
        Get a range of device uids.

        @type  ranges: [integer]
        @param ranges: List of two integers that are the min/max values of a
                       range of uids
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use to get uids (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   [string]
        @return:  A list of device uids
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "loadRanges", [data])
        return create_response(resp)

    def lockComponents(self, uids, hashcheck, uid=None, ranges=(), updates=False, deletion=False, sendEvent=False, meta_type=None, keys=None, start=0, limit=50, sort='name', dir='ASC', name=None):
        """
        
        Lock component(s) from changes.

        @type  uids: [string]
        @param uids: List of component uids to lock
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the components (from getComponents())
        @type  uid: string
        @param uid: (optional) Device to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  updates: boolean
        @param updates: (optional) True to lock component from updates (default: False)
        @type  deletion: boolean
        @param deletion: (optional) True to lock component from deletion
                         (default: False)
        @type  sendEvent: boolean
        @param sendEvent: (optional) True to send an event when an action is
                          blocked by locking (default: False)
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to retrieve
                          (default: None)
        @type  keys: [string]
        @param keys: not used
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: string
        @param name: (optional) Component name to search for when loading ranges
                     (default: None)
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "lockComponents", [data])
        return create_response(resp)

    def lockDevices(self, uids, hashcheck, ranges=(), updates=False, deletion=False, sendEvent=False, uid=None, params=None, sort='name', dir='ASC'):
        """
        
        Lock device(s) from changes.

        @type  uids: [string]
        @param uids: List of device uids to lock
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  updates: boolean
        @param updates: (optional) True to lock device from updates (default: False)
        @type  deletion: boolean
        @param deletion: (optional) True to lock device from deletion
                         (default: False)
        @type  sendEvent: boolean
        @param sendEvent: (optional) True to send an event when an action is
                          blocked by locking (default: False)
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "lockDevices", [data])
        return create_response(resp)

    def moveDevices(self, uids, target, hashcheck, ranges=(), uid=None, params=None, sort='name', dir='ASC'):
        """
        
        Moves the devices specified by uids to the organizer specified by 'target'.

        @type  uids: [string]
        @param uids: List of device uids to move
        @type  target: string
        @param target: Uid of the organizer to move the devices to
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - tree: ([dictionary]) Object representing the new device tree
             - exports: (integer) Number of devices moved
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "moveDevices", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "moveOrganizer", [data])
        return create_response(resp)

    def pushChanges(self, uids, hashcheck, ranges=(), uid=None, params=None, sort='name', dir='ASC'):
        """
        
        Push changes on device(s) configuration to collectors.

        @type  uids: [string]
        @param uids: List of device uids to push changes
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "pushChanges", [data])
        return create_response(resp)

    def remodel(self, deviceUid):
        """
        
        Submit a job to have a device remodeled.

        @type  deviceUid: string
        @param deviceUid: Device uid to have local template
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - jobId: (string) ID of the add device job
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "remodel", [data])
        return create_response(resp)

    def removeDevices(self, uids, hashcheck, action='remove', uid=None, ranges=(), params=None, sort='name', dir='ASC', deleteEvents=False, deletePerf=False):
        """
        
        Remove/delete device(s).

        @type  uids: [string]
        @param uids: List of device uids to remove
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  action: string
        @param action: Action to take. 'remove' to remove devices from organizer
                       uid, and 'delete' to delete the device from Zenoss.
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids and/or to remove device (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  deleteEvents: bool
        @param deleteEvents: will remove all the events for the devices as well
        @type  deletePerf: bool
        @param deletePerf: will remove all the perf data for the devices
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - devtree: ([dictionary]) Object representing the new device tree
             - grptree: ([dictionary]) Object representing the new group tree
             - systree: ([dictionary]) Object representing the new system tree
             - loctree: ([dictionary]) Object representing the new location tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "removeDevices", [data])
        return create_response(resp)

    def removeLocalTemplate(self, deviceUid, templateUid):
        """
        
        Removes a locally defined template on a device.

        @type  deviceUid: string
        @param deviceUid: Device uid that has local template
        @type  templateUid: string
        @param templateUid: Name of the template to remove
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "removeLocalTemplate", [data])
        return create_response(resp)

    def resetBoundTemplates(self, uid):
        """
        
        Remove all bound templates from a device.

        @type  uid: string
        @param uid: Device uid to remove bound templates from
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "resetBoundTemplates", [data])
        return create_response(resp)

    def resetCommunity(self, uids, hashcheck, uid=None, ranges=(), params=None, sort='name', dir='ASC'):
        """
        
        Reset SNMP community string(s) on device(s)

        @type  uids: [string]
        @param uids: List of device uids to reset
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "resetCommunity", [data])
        return create_response(resp)

    def resetIp(self, uids, hashcheck, uid=None, ranges=(), params=None, sort='name', dir='ASC', ip=''):
        """
        
        Reset IP address(es) of device(s) to the results of a DNS lookup or
        a manually set address

        @type  uids: [string]
        @param uids: List of device uids with IP's to reset
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  ip: string
        @param ip: (optional) IP to set device to. Empty string causes DNS
                   lookup (default: '')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "resetIp", [data])
        return create_response(resp)

    def setBoundTemplates(self, uid, templateIds):
        """
        
        Set a list of templates as bound to a device.

        @type  uid: string
        @param uid: Device uid to bind templates to
        @type  templateIds: [string]
        @param templateIds: List of template uids to bind to device
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setBoundTemplates", [data])
        return create_response(resp)

    def setCollector(self, uids, collector, hashcheck, uid=None, ranges=(), params=None, sort='name', dir='ASC'):
        """
        
        Set device(s) collector.

        @type  uids: [string]
        @param uids: List of device uids to set
        @type  collector: string
        @param collector: Collector to set devices to
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setCollector", [data])
        return create_response(resp)

    def setComponentsMonitored(self, uids, hashcheck, monitor=False, uid=None, ranges=(), meta_type=None, keys=None, start=0, limit=50, sort='name', dir='ASC', name=None):
        """
        
        Set the monitoring flag for component(s)

        @type  uids: [string]
        @param uids: List of component uids to set
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the components (from getComponents())
        @type  monitor: boolean
        @param monitor: (optional) True to monitor component (default: False)
        @type  uid: string
        @param uid: (optional) Device to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  meta_type: string
        @param meta_type: (optional) The meta type of the components to retrieve
                          (default: None)
        @type  keys: [string]
        @param keys: not used
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @type  name: string
        @param name: (optional) Component name to search for when loading ranges
                     (default: None)
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setComponentsMonitored", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Set attributes on a device or device organizer.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of an object
        @rtype: DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setInfo", [data])
        return create_response(resp)

    def setPriority(self, uids, priority, hashcheck, uid=None, ranges=(), params=None, sort='name', dir='ASC'):
        """
        
        Set device(s) priority.

        @type  uids: [string]
        @param uids: List of device uids to set
        @type  priority: integer
        @param priority: Priority to set device(s) to.
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setPriority", [data])
        return create_response(resp)

    def setProductInfo(self, uid, **data):
        """
        
        Sets the ProductInfo on a device. This method has the following valid
        keyword arguments:

        @type    uid: string
        @keyword uid: Unique identifier of a device
        @type    hwManufacturer: string
        @keyword hwManufacturer: Hardware manufacturer
        @type    hwProductName: string
        @keyword hwProductName: Hardware product name
        @type    osManufacturer: string
        @keyword osManufacturer: Operating system manufacturer
        @type    osProductName: string
        @keyword osProductName: Operating system product name
        @rtype:  DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setProductInfo", [data])
        return create_response(resp)

    def setProductionState(self, uids, prodState, hashcheck, uid=None, ranges=(), params=None, sort='name', dir='ASC'):
        """
        
        Set the production state of device(s).

        @type  uids: [string]
        @param uids: List of device uids to set
        @type  prodState: integer
        @param prodState: Production state to set device(s) to.
        @type  hashcheck: string
        @param hashcheck: Hashcheck for the devices (from getDevices())
        @type  uid: string
        @param uid: (optional) Organizer to use when using ranges to get
                    additional uids (default: None)
        @type  ranges: [integer]
        @param ranges: (optional) List of two integers that are the min/max
                       values of a range of uids to include (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       Can be one of the following: name, ipAddress,
                       deviceClass, or productionState (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return result (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  Success or failure message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setProductionState", [data])
        return create_response(resp)

    def setZenProperty(*args, **kwargs):
        """
        
        Sets the zProperty value
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DeviceRouter", "setZenProperty", [data])
        return create_response(resp)

router.device = DeviceRouter()

class ServiceRouter(object):

    url_path = "service_router"

    def addClass(self, contextUid, id, posQuery=None):
        """
        
        Add a new service class.

        @type  contextUid: string
        @param contextUid: Unique ID of the service ogranizer to add new class to
        @type  id: string
        @param id: ID of the new service
        @type  posQuery: dictionary
        @param posQuery: Object defining a query where the returned position will lie
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - newIndex: (integer) Index of the newly added class in the query
             defined by posQuery
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "addClass", [data])
        return create_response(resp)

    def addNode(self, type, contextUid, id, description=None):
        """
        
        Add a node to the existing tree underneath the node specified
        by the context UID

        @type  type: string
        @param type: Either 'class' or 'organizer'
        @type  contextUid: string
        @param contextUid: Path to the node that will
                           be the new node's parent (ex. /zport/dmd/Devices)
        @type  id: string
        @param id: Identifier of the new node, must be unique in the
                   parent context
        @type  description: string
        @param description: (optional) Describes this new node (default: None)
        @rtype:   dictionary
        @return:  Marshaled form of the created node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Deletes a node from the tree.

        B{NOTE}: You can not delete a root node of a tree

        @type  uid: string
        @param uid: Unique identifier of the node we wish to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - msg: (string) Status message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "deleteNode", [data])
        return create_response(resp)

    def getClassNames(self, uid=None, query=None):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getClassNames", [data])
        return create_response(resp)

    def getInfo(self, uid, keys=None):
        """
        
        Get the properties of a service.

        @type  uid: string
        @param uid: Unique identifier of a service
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
                     (default: None)
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object representing a service's properties
            - disabled: (boolean) True if current user cannot manage services
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getInfo", [data])
        return create_response(resp)

    def getInstances(self, uid, start=0, params=None, limit=50, sort='name', dir='ASC'):
        """
        
        Get a list of instances for a service UID.

        @type  uid: string
        @param uid: Service UID to get instances of
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing service instances
             - totalCount: (integer) Total number of instances
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getInstances", [data])
        return create_response(resp)

    def getMonitoredStartModes(self, uid):
        """
        
        Get a list of monitored start modes for a Windows service.

        @type  uid: string
        @param uid: Unique ID of a Windows service.
        @rtype:   DirectResponse
        @return:  B{Properties}:
            - data: ([string]) List of monitored start modes for a Windows service
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getMonitoredStartModes", [data])
        return create_response(resp)

    def getOrganizerTree(self, id):
        """
        
        Returns the tree structure of an organizer hierarchy, only including
        organizers.

        @type  id: string
        @param id: Id of the root node of the tree to be returned
        @rtype:   [dictionary]
        @return:  Object representing the organizer tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getOrganizerTree", [data])
        return create_response(resp)

    def getTree(self, id):
        """
        
        Returns the tree structure of an organizer hierarchy.

        @type  id: string
        @param id: Id of the root node of the tree to be returned
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getTree", [data])
        return create_response(resp)

    def getUnmonitoredStartModes(self, uid):
        """
        
        Get a list of unmonitored start modes for a Windows service.

        @type  uid: string
        @param uid: Unique ID of a Windows service.
        @rtype:   DirectResponse
        @return:  B{Properties}:
            - data: ([string]) List of unmonitored start modes for a Windows service
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "getUnmonitoredStartModes", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "moveOrganizer", [data])
        return create_response(resp)

    def moveServices(self, sourceUids, targetUid):
        """
        
        Move service(s) from one organizer to another.

        @type  sourceUids: [string]
        @param sourceUids: UID(s) of the service(s) to move
        @type  targetUid: string
        @param targetUid: UID of the organizer to move to
        @rtype:   DirectResponse
        @return:  Success messsage
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "moveServices", [data])
        return create_response(resp)

    def query(self, limit=None, start=None, sort=None, dir=None, params=None, history=False, uid=None, criteria=()):
        """
        
        Retrieve a list of services based on a set of parameters.

        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: None)
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     None)
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
        @type  history: boolean
        @param history: not used
        @type  uid: string
        @param uid: Service class UID to query
        @type  criteria: list
        @param criteria: not used
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - services: ([dictionary]) List of objects representing services
             - totalCount: (integer) Total number of services
             - hash: (string) Hashcheck of the current services state
             - disabled: (boolean) True if current user cannot manage services
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "query", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Set attributes on a service.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of a service
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ServiceRouter", "setInfo", [data])
        return create_response(resp)

router.service = ServiceRouter()

class MibRouter(object):

    url_path = "mib_router"

    def addMIB(self, package, organizer='/'):
        """
        
        Add a new MIB by URL or local file.

        @type  package: string
        @param package: URL or local file path to MIB file
        @type  organizer: string
        @param organizer: ID of the organizer to add MIB to
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - jobId: (string) ID of the add MIB job
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "addMIB", [data])
        return create_response(resp)

    def addNode(self, contextUid='', id='', type=''):
        """
        
        Add an organizer or new blank MIB.

        @type  contextUid: string
        @param contextUid: Context to attach new node
        @type  id: string
        @param id: Id of the new orgainzer or blank MIB
        @type  type: string
        @param type: Type of new node. Can be 'organizer' or 'MIB'
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - tree: ([dictionary]) Object representing the new tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "addNode", [data])
        return create_response(resp)

    def addOidMapping(self, uid, id, oid, nodetype='node'):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "addOidMapping", [data])
        return create_response(resp)

    def addTrap(self, uid, id, oid, nodetype='notification'):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "addTrap", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Remove an organizer or MIB.

        @type  uid: string
        @param uid: UID of organizer or MIB to remove
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - tree: ([dictionary]) Object representing the new tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "deleteNode", [data])
        return create_response(resp)

    def deleteOidMapping(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "deleteOidMapping", [data])
        return create_response(resp)

    def deleteTrap(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "deleteTrap", [data])
        return create_response(resp)

    def getInfo(self, uid, useFieldSets=True):
        """
        
        Get the properties of a MIB

        @type  uid: string
        @param uid: Unique identifier of a MIB
        @type  useFieldSets: boolean
        @param useFieldSets: True to return a fieldset version of the info form
                             (default: True)
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object representing a MIB's properties
            - form: (dictionary) Object representing an edit form for a MIB's
                    properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getInfo", [data])
        return create_response(resp)

    def getMibNodeTree(self, id=None):
        """
        
        A MIB node is a regular OID (ie you can hit it with snmpwalk)
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getMibNodeTree", [data])
        return create_response(resp)

    def getMibTrapTree(self, id=None):
        """
        
        A MIB trap node is an OID received from a trap
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getMibTrapTree", [data])
        return create_response(resp)

    def getOidMappings(self, uid, dir='ASC', sort='name', start=0, limit=256):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getOidMappings", [data])
        return create_response(resp)

    def getOrganizerTree(self, id):
        """
        
        Returns the tree structure of an organizer hierarchy, only including
        organizers.

        @type  id: string
        @param id: Id of the root node of the tree to be returned
        @rtype:   [dictionary]
        @return:  Object representing the organizer tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getOrganizerTree", [data])
        return create_response(resp)

    def getTraps(self, uid, dir='ASC', sort='name', start=0, limit=256):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getTraps", [data])
        return create_response(resp)

    def getTree(self, id='/zport/dmd/Mibs'):
        """
        
        Returns the tree structure of an organizer hierarchy. Default tree
        root is MIBs.

        @type  id: string
        @param id: (optional) Id of the root node of the tree to be
                   returned (default: '/zport/dmd/Mibs')
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "getTree", [data])
        return create_response(resp)

    def moveNode(self, uids, target):
        """
        
        Move an organizer or MIB from one organizer to another.

        @type  uids: [string]
        @param uids: UIDs of organizers and MIBs to move
        @type  target: string
        @param target: UID of the organizer to move to
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - data: (dictionary) Object representing the new parent organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "moveNode", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "moveOrganizer", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Set attributes on a MIB.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of a MIB
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object representing a MIB's new properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MibRouter", "setInfo", [data])
        return create_response(resp)

router.mib = MibRouter()

class Network6Router(object):

    url_path = "network_6_router"

    def addNode(self, newSubnet, contextUid):
        """
        
        Add a new subnet.

        @type  newSubnet: string
        @param newSubnet: New subnet to add
        @type  contextUid: string
        @param contextUid: Unique identifier of the network parent of the new subnet
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - newNode: (dictionary) An object representing the new subnet node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Delete a subnet.

        @type  uid: string
        @param uid: Unique identifier of the subnet to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - tree: (dictionary) An object representing the new network tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "deleteNode", [data])
        return create_response(resp)

    def discoverDevices(self, uid):
        """
        
        Discover devices on a network.

        @type  uid: string
        @param uid: Unique identifier of the network to discover
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - jobId: (integer) The id of the discovery job
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "discoverDevices", [data])
        return create_response(resp)

    def getInfo(self, uid, keys=None):
        """
        
        Returns a dictionary of the properties of an object

        @type  uid: string
        @param uid: Unique identifier of an object
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "getInfo", [data])
        return create_response(resp)

    def getIpAddresses(self, uid, start=0, params=None, limit=50, sort='ipAddressAsInt', dir='ASC'):
        """
        
        Given a subnet, get a list of IP addresses and their relations.

        @type  uid: string
        @param uid: Unique identifier of a subnet
        @type  start: integer
        @param start: Offset to return the results from; used in pagination
        @type  params: string
        @param params: Not used
        @type  limit: integer
        @param limit: Number of items to return; used in pagination
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results;
                     defaults to 'name'
        @type  dir: string
        @param dir: Sort order; can be either 'ASC' or 'DESC'
        @rtype: DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "getIpAddresses", [data])
        return create_response(resp)

    def getTree(self, id='/zport/dmd/Networks'):
        """
        
        Returns the tree structure of an organizer hierarchy where
        the root node is the organizer identified by the id parameter.

        @type  id: string
        @param id: Id of the root node of the tree to be returned. Defaults to
                   the Networks tree root.
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "getTree", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "moveOrganizer", [data])
        return create_response(resp)

    def removeIpAddresses(self, uids=None):
        """
        
        Removes every ip address specified by uids that are
        not attached to any device
        @type  uids: Array of Strings
        @param uids: unique identfiers of the ip addresses to delete
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "removeIpAddresses", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Main method for setting attributes on a network or network organizer.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of an object
        @rtype: DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "Network6Router", "setInfo", [data])
        return create_response(resp)

router.network6 = Network6Router()

class SettingsRouter(object):

    url_path = "settings_router"

    def getUserInterfaceSettings(self):
        """
        
        Retrieves the collection of User interface settings
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SettingsRouter", "getUserInterfaceSettings", [data])
        return create_response(resp)

    def setUserInterfaceSettings(self, **kwargs):
        """
        
        Accepts key value pair of user interface settings.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SettingsRouter", "setUserInterfaceSettings", [data])
        return create_response(resp)

router.settings = SettingsRouter()

class MessagingRouter(object):

    url_path = "messaging_router"

    def clearBrowserState(self, user=None):
        """
        
        Removes all the stored state associated with the current user
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MessagingRouter", "clearBrowserState", [data])
        return create_response(resp)

    def getUserMessages(self):
        """
        
        Get the queued messages for the logged in user.

        @rtype:   dictionary
        @return:  B{Properties}:
           - messages: ([string]) A list of queued messages.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MessagingRouter", "getUserMessages", [data])
        return create_response(resp)

    def setBrowserState(self, state):
        """
        
        Save the browser state for the current user.

        @param state: The browser state as a JSON-encoded string
        @type state: str
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "MessagingRouter", "setBrowserState", [data])
        return create_response(resp)

router.messaging = MessagingRouter()

class TriggersRouter(object):

    url_path = "triggers_router"

    def addNotification(self, newId, action):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "addNotification", [data])
        return create_response(resp)

    def addTrigger(self, newId):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "addTrigger", [data])
        return create_response(resp)

    def addWindow(self, contextUid, newId):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "addWindow", [data])
        return create_response(resp)

    def getNotification(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getNotification", [data])
        return create_response(resp)

    def getNotificationTypes(self):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getNotificationTypes", [data])
        return create_response(resp)

    def getNotifications(self):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getNotifications", [data])
        return create_response(resp)

    def getRecipientOptions(self):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getRecipientOptions", [data])
        return create_response(resp)

    def getTrigger(self, uuid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getTrigger", [data])
        return create_response(resp)

    def getTriggerList(self, **unused):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getTriggerList", [data])
        return create_response(resp)

    def getTriggers(self, **kwargs):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getTriggers", [data])
        return create_response(resp)

    def getWindow(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getWindow", [data])
        return create_response(resp)

    def getWindows(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "getWindows", [data])
        return create_response(resp)

    def parseFilter(self, source):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "parseFilter", [data])
        return create_response(resp)

    def removeNotification(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "removeNotification", [data])
        return create_response(resp)

    def removeTrigger(self, uuid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "removeTrigger", [data])
        return create_response(resp)

    def removeWindow(self, uid):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "removeWindow", [data])
        return create_response(resp)

    def updateNotification(self, **data):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "updateNotification", [data])
        return create_response(resp)

    def updateTrigger(self, **data):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "updateTrigger", [data])
        return create_response(resp)

    def updateWindow(self, **data):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TriggersRouter", "updateWindow", [data])
        return create_response(resp)

router.triggers = TriggersRouter()

class ProcessRouter(object):

    url_path = "process_router"

    def addNode(self, type, contextUid, id, description=None):
        """
        
        Add a node to the existing tree underneath the node specified
        by the context UID

        @type  type: string
        @param type: Either 'class' or 'organizer'
        @type  contextUid: string
        @param contextUid: Path to the node that will
                           be the new node's parent (ex. /zport/dmd/Devices)
        @type  id: string
        @param id: Identifier of the new node, must be unique in the
                   parent context
        @type  description: string
        @param description: (optional) Describes this new node (default: None)
        @rtype:   dictionary
        @return:  Marshaled form of the created node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Deletes a node from the tree.

        B{NOTE}: You can not delete a root node of a tree

        @type  uid: string
        @param uid: Unique identifier of the node we wish to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - msg: (string) Status message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "deleteNode", [data])
        return create_response(resp)

    def getInfo(self, uid, keys=None):
        """
        
        Get the properties of a process.

        @type  uid: string
        @param uid: Unique identifier of a process
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
                     (default: None)
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object representing a process's properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "getInfo", [data])
        return create_response(resp)

    def getInstances(self, uid, start=0, params=None, limit=50, sort='name', dir='ASC'):
        """
        
        Get a list of instances for a process UID.

        @type  uid: string
        @param uid: Process UID to get instances of
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: 0)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: 50)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'name')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'ASC')
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing process instances
             - total: (integer) Total number of instances
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "getInstances", [data])
        return create_response(resp)

    def getSequence(self):
        """
        
        Get the current processes sequence.

        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing processes in
             sequence order
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "getSequence", [data])
        return create_response(resp)

    def getTree(self, id):
        """
        
        Returns the tree structure of an organizer hierarchy where
        the root node is the organizer identified by the id parameter.

        @type  id: string
        @param id: Id of the root node of the tree to be returned
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "getTree", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "moveOrganizer", [data])
        return create_response(resp)

    def moveProcess(self, uid, targetUid):
        """
        
        Move a process or organizer from one organizer to another.

        @type  uid: string
        @param uid: UID of the process or organizer to move
        @type  targetUid: string
        @param targetUid: UID of the organizer to move to
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - uid: (dictionary) The new uid for moved process or organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "moveProcess", [data])
        return create_response(resp)

    def query(self, limit=None, start=None, sort=None, dir=None, params=None, history=False, uid=None, criteria=()):
        """
        
        Retrieve a list of processes based on a set of parameters.

        @type  limit: integer
        @param limit: (optional) Number of items to return; used in pagination
                      (default: None)
        @type  start: integer
        @param start: (optional) Offset to return the results from; used in
                      pagination (default: None)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     None)
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
        @type  history: boolean
        @param history: not used
        @type  uid: string
        @param uid: Service class UID to query
        @type  criteria: list
        @param criteria: not used
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - processes: ([dictionary]) List of objects representing processes
             - totalCount: (integer) Total number of processes
             - hash: (string) Hashcheck of the current processes state
             - disabled: (boolean) True if current user cannot manage processes
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "query", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Set attributes on a process.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of a process
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object representing a process's new properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "setInfo", [data])
        return create_response(resp)

    def setSequence(self, uids):
        """
        
        Set the current processes sequence.

        @type  uids: [string]
        @param uids: The set of process uid's in the desired sequence
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ProcessRouter", "setSequence", [data])
        return create_response(resp)

router.process = ProcessRouter()

class NetworkRouter(object):

    url_path = "network_router"

    def addNode(self, newSubnet, contextUid):
        """
        
        Add a new subnet.

        @type  newSubnet: string
        @param newSubnet: New subnet to add
        @type  contextUid: string
        @param contextUid: Unique identifier of the network parent of the new subnet
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - newNode: (dictionary) An object representing the new subnet node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Delete a subnet.

        @type  uid: string
        @param uid: Unique identifier of the subnet to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - tree: (dictionary) An object representing the new network tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "deleteNode", [data])
        return create_response(resp)

    def discoverDevices(self, uid):
        """
        
        Discover devices on a network.

        @type  uid: string
        @param uid: Unique identifier of the network to discover
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - jobId: (integer) The id of the discovery job
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "discoverDevices", [data])
        return create_response(resp)

    def getInfo(self, uid, keys=None):
        """
        
        Returns a dictionary of the properties of an object

        @type  uid: string
        @param uid: Unique identifier of an object
        @type  keys: list
        @param keys: (optional) List of keys to include in the returned
                     dictionary. If None then all keys will be returned
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object properties
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "getInfo", [data])
        return create_response(resp)

    def getIpAddresses(self, uid, start=0, params=None, limit=50, sort='ipAddressAsInt', dir='ASC'):
        """
        
        Given a subnet, get a list of IP addresses and their relations.

        @type  uid: string
        @param uid: Unique identifier of a subnet
        @type  start: integer
        @param start: Offset to return the results from; used in pagination
        @type  params: string
        @param params: Not used
        @type  limit: integer
        @param limit: Number of items to return; used in pagination
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results;
                     defaults to 'name'
        @type  dir: string
        @param dir: Sort order; can be either 'ASC' or 'DESC'
        @rtype: DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "getIpAddresses", [data])
        return create_response(resp)

    def getTree(self, id='/zport/dmd/Networks'):
        """
        
        Returns the tree structure of an organizer hierarchy where
        the root node is the organizer identified by the id parameter.

        @type  id: string
        @param id: Id of the root node of the tree to be returned. Defaults to
                   the Networks tree root.
        @rtype:   [dictionary]
        @return:  Object representing the tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "getTree", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "moveOrganizer", [data])
        return create_response(resp)

    def removeIpAddresses(self, uids=None):
        """
        
        Removes every ip address specified by uids that are
        not attached to any device
        @type  uids: Array of Strings
        @param uids: unique identfiers of the ip addresses to delete
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "removeIpAddresses", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Main method for setting attributes on a network or network organizer.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of an object
        @rtype: DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "NetworkRouter", "setInfo", [data])
        return create_response(resp)

router.network = NetworkRouter()

class TemplateRouter(object):

    url_path = "template_router"

    def addCustomToGraph(self, graphUid, customId, customType):
        """
        
        Add a custom graph point to a graph definition.

        @type  graphUid: string
        @param graphUid: Unique ID of the graph definition to add graph point to
        @type  customId: string
        @param customId: ID of the new custom graph point
        @type  customType: string
        @param customType: Type of the new graph point. From getGraphInstructionTypes()
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addCustomToGraph", [data])
        return create_response(resp)

    def addDataPoint(self, dataSourceUid, name):
        """
        
        Add a new data point to a data source.

        @type  dataSourceUid: string
        @param dataSourceUid: Unique ID of the data source to add data point to
        @type  name: string
        @param name: ID of the new data point
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addDataPoint", [data])
        return create_response(resp)

    def addDataPointToGraph(self, dataPointUid, graphUid, includeThresholds=False):
        """
        
        Add a data point to a graph.

        @type  dataPointUid: string
        @param dataPointUid: Unique ID of the data point to add to graph
        @type  graphUid: string
        @param graphUid: Unique ID of the graph to add data point to
        @type  includeThresholds: boolean
        @param includeThresholds: (optional) True to include related thresholds
                                  (default: False)
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addDataPointToGraph", [data])
        return create_response(resp)

    def addDataSource(self, templateUid, name, type):
        """
        
        Add a new data source to a template.

        @type  templateUid: string
        @param templateUid: Unique ID of the template to add data source to
        @type  name: string
        @param name: ID of the new data source
        @type  type: string
        @param type: Type of the new data source. From getDataSourceTypes()
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addDataSource", [data])
        return create_response(resp)

    def addGraphDefinition(self, templateUid, graphDefinitionId):
        """
        
        Add a new graph definition to a template.

        @type  templateUid: string
        @param templateUid: Unique ID of the template to add graph definition to
        @type  graphDefinitionId: string
        @param graphDefinitionId: ID of the new graph definition
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addGraphDefinition", [data])
        return create_response(resp)

    def addNode(self, type, contextUid, id, description=None):
        """
        
        Add a node to the existing tree underneath the node specified
        by the context UID

        @type  type: string
        @param type: Either 'class' or 'organizer'
        @type  contextUid: string
        @param contextUid: Path to the node that will
                           be the new node's parent (ex. /zport/dmd/Devices)
        @type  id: string
        @param id: Identifier of the new node, must be unique in the
                   parent context
        @type  description: string
        @param description: (optional) Describes this new node (default: None)
        @rtype:   dictionary
        @return:  Marshaled form of the created node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addNode", [data])
        return create_response(resp)

    def addTemplate(self, id, targetUid):
        """
        
        Add a template to a device class.

        @type  id: string
        @param id: Unique ID of the template to add
        @type  targetUid: string
        @param targetUid: Unique ID of the device class to add template to
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - nodeConfig: (dictionary) Object representing the added template
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addTemplate", [data])
        return create_response(resp)

    def addThreshold(self, **data):
        """
        
        Add a threshold.

        @type    uid: string
        @keyword uid: Unique identifier of template to add threshold to
        @type    thresholdType: string
        @keyword thresholdType: Type of the new threshold. From getThresholdTypes()
        @type    thresholdId: string
        @keyword thresholdId: ID of the new threshold
        @type    dataPoints: [string]
        @keyword dataPoints: List of data points to select for this threshold
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addThreshold", [data])
        return create_response(resp)

    def addThresholdToGraph(self, graphUid, thresholdUid):
        """
        
        Add a threshold to a graph definition.

        @type  graphUid: string
        @param graphUid: Unique ID of the graph definition to add threshold to
        @type  thresholdUid: string
        @param thresholdUid: Unique ID of the threshold to add
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "addThresholdToGraph", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None, additionalKeys=()):
        """
        
        Server side method for asynchronous tree calls. Retrieves
        the immediate children of the node specified by "id"

        NOTE: our convention on the UI side is if we are asking
        for the root node then return the root and its children
        otherwise just return the children

        @type  id: string
        @param id: The uid of the node we are getting the children for
        @rtype:   [dictionary]
        @return:  Object representing the immediate children
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "asyncGetTree", [data])
        return create_response(resp)

    def copyTemplate(self, uid, targetUid):
        """
        
        Copy a template to a device or device class.

        @type  uid: string
        @param uid: Unique ID of the template to copy
        @type  targetUid: string
        @param targetUid: Unique ID of the device or device class to bind to template
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "copyTemplate", [data])
        return create_response(resp)

    def deleteDataPoint(self, uid):
        """
        
        Delete a data point.

        @type  uid: string
        @param uid: Unique ID of the data point to delete
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteDataPoint", [data])
        return create_response(resp)

    def deleteDataSource(self, uid):
        """
        
        Delete a data source.

        @type  uid: string
        @param uid: Unique ID of the data source to delete
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteDataSource", [data])
        return create_response(resp)

    def deleteGraphDefinition(self, uid):
        """
        
        Delete a graph definition.

        @type  uid: string
        @param uid: Unique ID of the graph definition to delete
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteGraphDefinition", [data])
        return create_response(resp)

    def deleteGraphPoint(self, uid):
        """
        
        Delete a graph point.

        @type  uid: string
        @param uid: Unique ID of the graph point to delete
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteGraphPoint", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Deletes a node from the tree.

        B{NOTE}: You can not delete a root node of a tree

        @type  uid: string
        @param uid: Unique identifier of the node we wish to delete
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - msg: (string) Status message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteNode", [data])
        return create_response(resp)

    def deleteTemplate(self, uid):
        """
        
        Delete a template.

        @type  uid: string
        @param uid: Unique ID of the template to delete
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "deleteTemplate", [data])
        return create_response(resp)

    def getAddTemplateTargets(self, query):
        """
        
        Get a list of available device classes where new templates can be added.

        @type  query: string
        @param query: not used
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects containing an available device
             class UID and a human-readable label for that class

        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getAddTemplateTargets", [data])
        return create_response(resp)

    def getCopyTargets(self, uid, query=''):
        """
        
        Get a list of available device classes to copy a template to.

        @type  uid: string
        @param uid: Unique ID of the template to copy
        @type  query: string
        @param query: (optional) Filter the returned targets' names based on this
                      parameter (default: '')
        @rtype:   DirectResponse
        @return: B{Properties}:
            - data: ([dictionary]) List of objects containing an available device
             class UID and a human-readable label for that class
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getCopyTargets", [data])
        return create_response(resp)

    def getDataPointDetails(self, uid):
        """
        
        Get a data point's details.

        @type  uid: string
        @param uid: Unique ID of a data point
        @rtype:   dictionary
        @return:  B{Properties}:
             - record: (dictionary) Object representing the data point
             - form: (dictionary) Object representing an ExtJS form for the data
             point
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDataPointDetails", [data])
        return create_response(resp)

    def getDataPoints(self, query, uid):
        """
        
        Get a list of available data points for a template.

        @type  query: string
        @param query: not used
        @type  uid: string
        @param uid: Unique ID of a template
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: ([dictionary]) List of objects representing data points
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDataPoints", [data])
        return create_response(resp)

    def getDataSourceDetails(self, uid):
        """
        
        Get a data source's details.

        @type  uid: string
        @param uid: Unique ID of a data source
        @rtype:   dictionary
        @return:  B{Properties}:
             - record: (dictionary) Object representing the data source
             - form: (dictionary) Object representing an ExtJS form for the data
             source
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDataSourceDetails", [data])
        return create_response(resp)

    def getDataSourceTypes(self, query):
        """
        
        Get a list of available data source types.

        @type  query: string
        @param query: not used
        @rtype:   [dictionary]
        @return:  List of objects representing data source types
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDataSourceTypes", [data])
        return create_response(resp)

    def getDataSources(self, id):
        """
        
        Get the data sources for a template.

        @type  id: string
        @param id: Unique ID of a template
        @rtype:   [dictionary]
        @return:  List of objects representing representing data sources
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDataSources", [data])
        return create_response(resp)

    def getDeviceClassTemplates(self, id):
        """
        
        Get all templates by device class. This will return a tree where device
        classes are nodes, and templates are leaves.

        @type  id: string
        @param id: not used
        @rtype:   [dictionary]
        @return:  List of objects representing the templates in tree hierarchy
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getDeviceClassTemplates", [data])
        return create_response(resp)

    def getGraphDefinition(self, uid):
        """
        
        Get a graph definition.

        @type  uid: string
        @param uid: Unique ID of the graph definition to retrieve
        @rtype:   DirectResponse
        @return: B{Properties}:
            - data: (dictionary) Object representing a graph definition
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getGraphDefinition", [data])
        return create_response(resp)

    def getGraphInstructionTypes(self, query=''):
        """
        
        Get a list of available instruction types for graph points.

        @type  query: string
        @param query: not used
        @rtype:   DirectResponse
        @return: B{Properties}:
            - data: ([dictionary]) List of objects representing instruction types
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getGraphInstructionTypes", [data])
        return create_response(resp)

    def getGraphPoints(self, uid):
        """
        
        Get a list of graph points for a graph definition.

        @type  uid: string
        @param uid: Unique ID of a graph definition
        @rtype:  DirectResponse
        @return: B{Properties}:
            - data: ([dictionary]) List of objects representing graph points
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getGraphPoints", [data])
        return create_response(resp)

    def getGraphs(self, uid, query=None):
        """
        
        Get the graph definitions for a template.

        @type  uid: string
        @param uid: Unique ID of a template
        @type  query: string
        @param query: not used
        @rtype:   [dictionary]
        @return:  List of objects representing representing graphs
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getGraphs", [data])
        return create_response(resp)

    def getInfo(self, uid):
        """
        
        Get the properties of an object.

        @type  uid: string
        @param uid: Unique identifier of an object
        @rtype:   DirectResponse
        @return:  B{Properties}
            - data: (dictionary) Object properties
            - form: (dictionary) Object representing an ExtJS form for the object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getInfo", [data])
        return create_response(resp)

    def getObjTemplates(self, uid):
        """
        
        @type  uid: string
        @param uid: Identifier for the object we want templates on, must descend from RRDView
        @rtype: DirectResponse
        @return: List of templates
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getObjTemplates", [data])
        return create_response(resp)

    def getTemplates(self, id):
        """
        
        Get all templates.

        @type  id: string
        @param id: not used
        @rtype:   [dictionary]
        @return:  List of objects representing the templates in tree hierarchy
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getTemplates", [data])
        return create_response(resp)

    def getThresholdDetails(self, uid):
        """
        
        Get a threshold's details.

        @type  uid: string
        @param uid: Unique ID of a threshold
        @rtype:   dictionary
        @return:  B{Properties}:
             - record: (dictionary) Object representing the threshold
             - form: (dictionary) Object representing an ExtJS form for the threshold
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getThresholdDetails", [data])
        return create_response(resp)

    def getThresholdTypes(self, query):
        """
        
        Get a list of available threshold types.

        @type  query: string
        @param query: not used
        @rtype:   [dictionary]
        @return:  List of objects representing threshold types
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getThresholdTypes", [data])
        return create_response(resp)

    def getThresholds(self, uid, query=''):
        """
        
        Get the thresholds for a template.

        @type  uid: string
        @param uid: Unique ID of a template
        @type  query: string
        @param query: not used
        @rtype:   [dictionary]
        @return:  List of objects representing representing thresholds
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "getThresholds", [data])
        return create_response(resp)

    def makeLocalRRDTemplate(self, uid, templateName):
        """
        
        @type  uid: string
        @param uid: Identifer of the obj we wish to make the template local for
        @type  templateName: string
        @param templateName: identifier of the template
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "makeLocalRRDTemplate", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "moveOrganizer", [data])
        return create_response(resp)

    def removeLocalRRDTemplate(self, uid, templateName):
        """
        
        @type  uid: string
        @param uid: Identifer of the obj we wish to remove the local template
        @type  templateName: string
        @param templateName: identifier of the local template
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "removeLocalRRDTemplate", [data])
        return create_response(resp)

    def removeThreshold(self, uid):
        """
        
        Remove a threshold.

        @type  uid: string
        @param uid: Unique identifier of threshold to remove
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "removeThreshold", [data])
        return create_response(resp)

    def setGraphDefinition(self, **data):
        """
        
        Set attributes on an graph definition.
        This method accepts any keyword argument for the property that you wish
        to set. Properties are enumerated via getGraphDefinition(). The only
        required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of an object
        @rtype:  DirectResponse
        @return: B{Properties}:
            - data: (dictionary) The modified object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "setGraphDefinition", [data])
        return create_response(resp)

    def setGraphDefinitionSequence(self, uids):
        """
        
        Sets the sequence of graph definitions.

        @type  uids: [string]
        @param uids: List of graph definition UID's in desired order
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "setGraphDefinitionSequence", [data])
        return create_response(resp)

    def setGraphPointSequence(self, uids):
        """
        
        Sets the sequence of graph points in a graph definition.

        @type  uids: [string]
        @param uids: List of graph point UID's in desired order
        @rtype:  DirectResponse
        @return: Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "setGraphPointSequence", [data])
        return create_response(resp)

    def setInfo(self, **data):
        """
        
        Set attributes on an object.
        This method accepts any keyword argument for the property that you wish
        to set. The only required property is "uid".

        @type    uid: string
        @keyword uid: Unique identifier of an object
        @rtype:  DirectResponse
        @return: B{Properties}:
            - data: (dictionary) The modified object
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "TemplateRouter", "setInfo", [data])
        return create_response(resp)

router.template = TemplateRouter()

class EventsRouter(object):

    url_path = "evconsole_router"

    def acknowledge(self, evids=None, excludeIds=None, params=None, uid=None, asof=None, limit=None):
        """
        
        Acknowledge event(s).

        @type  evids: [string]
        @param evids: (optional) List of event IDs to acknowledge (default: None)
        @type  excludeIds: [string]
        @param excludeIds: (optional) List of event IDs to exclude from
                           acknowledgment (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       (default: None)
        @type  uid: string
        @param uid: (optional) Context for the query (default: None)
        @type  asof: float
        @param asof: (optional) Only acknowledge if there has been no state
                     change since this time (default: None)
        @type  limit: The maximum number of events to update in this batch.
        @param limit: (optional) Maximum number of events to update (default: None).
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "acknowledge", [data])
        return create_response(resp)

    def add_event(self, summary, device, component, severity, evclasskey, evclass):
        """
        
        Create a new event.

        @type  summary: string
        @param summary: New event's summary
        @type  device: string
        @param device: Device uid to use for new event
        @type  component: string
        @param component: Component uid to use for new event
        @type  severity: string
        @param severity: Severity of new event. Can be one of the following:
                         Critical, Error, Warning, Info, Debug, or Clear
        @type  evclasskey: string
        @param evclasskey: The Event Class Key to assign to this event
        @type  evclass: string
        @param evclass: Event class for the new event
        @rtype:   DirectResponse
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "add_event", [data])
        return create_response(resp)

    def classify(self, evrows, evclass):
        """
        
        Associate event(s) with an event class.

        @type  evrows: [dictionary]
        @param evrows: List of event rows to classify
        @type  evclass: string
        @param evclass: Event class to associate events to
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - msg: (string) Success/failure message
           - success: (boolean) True if class update successful
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "classify", [data])
        return create_response(resp)

    def clear_heartbeats(self):
        """
        
        Clear all heartbeat events

        @rtype:   DirectResponse
        @return:  B{Properties}:
           - success: (boolean) True if heartbeats deleted successfully
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "clear_heartbeats", [data])
        return create_response(resp)

    def close(self, evids=None, excludeIds=None, params=None, uid=None, asof=None, limit=None):
        """
        
        Close event(s).

        @type  evids: [string]
        @param evids: (optional) List of event IDs to close (default: None)
        @type  excludeIds: [string]
        @param excludeIds: (optional) List of event IDs to exclude from
                           close (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       (default: None)
        @type  uid: string
        @param uid: (optional) Context for the query (default: None)
        @type  asof: float
        @param asof: (optional) Only close if there has been no state
                     change since this time (default: None)
        @type  limit: The maximum number of events to update in this batch.
        @param limit: (optional) Maximum number of events to update (default: None).
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "close", [data])
        return create_response(resp)

    def column_config(self, uid=None, archive=False):
        """
        
        Get the current event console field column configuration.

        @type  uid: string
        @param uid: (optional) UID context to use (default: None)
        @type  archive: boolean
        @param archive: (optional) True to use the event archive instead
                        of active events (default: False)
        @rtype:   [dictionary]
        @return:  A list of objects representing field columns
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "column_config", [data])
        return create_response(resp)

    def detail(self, evid):
        """
        
        Get event details.

        @type  evid: string
        @param evid: Event ID to get details
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - event: ([dictionary]) List containing a dictionary representing
                    event details
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "detail", [data])
        return create_response(resp)

    def getConfig(self):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "getConfig", [data])
        return create_response(resp)

    def nextEventSummaryUpdate(self, next_request):
        """
        
        When performing updates from the event console, updates are performed in batches
        to allow the user to see the progress of event changes and cancel out of updates
        while they are in progress. This works by specifying a limit to one of the close,
        acknowledge, or reopen calls in this router. The response will contain an
        EventSummaryUpdateResponse, and if there are additional updates to be performed,
        it will contain a next_request field with all of the parameters used to update
        the next range of events.

        @type  next_request: dictionary
        @param next_request: The next_request field from the previous updates.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "nextEventSummaryUpdate", [data])
        return create_response(resp)

    def postNote(self, uuid, note):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "postNote", [data])
        return create_response(resp)

    def query(self, limit=0, start=0, sort='lastTime', dir='desc', params=None, archive=False, uid=None, detailFormat=False):
        """
        
        Query for events.

        @type  limit: integer
        @param limit: (optional) Max index of events to retrieve (default: 0)
        @type  start: integer
        @param start: (optional) Min index of events to retrieve (default: 0)
        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'lastTime')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'DESC')
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       (default: None)
        @type  archive: boolean
        @param archive: (optional) True to search the event history table instead
                        of active events (default: False)
        @type  uid: string
        @param uid: (optional) Context for the query (default: None)
        @rtype:   dictionary
        @return:  B{Properties}:
           - events: ([dictionary]) List of objects representing events
           - totalCount: (integer) Total count of events returned
           - asof: (float) Current time
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "query", [data])
        return create_response(resp)

    def queryArchive(self, limit=0, start=0, sort='lastTime', dir='desc', params=None, uid=None, detailFormat=False):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "queryArchive", [data])
        return create_response(resp)

    def queryGenerator(self, sort='lastTime', dir='desc', evids=None, excludeIds=None, params=None, archive=False, uid=None, detailFormat=False):
        """
        
        Query for events.

        @type  sort: string
        @param sort: (optional) Key on which to sort the return results (default:
                     'lastTime')
        @type  dir: string
        @param dir: (optional) Sort order; can be either 'ASC' or 'DESC'
                    (default: 'DESC')
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       (default: None)
        @type  archive: boolean
        @param archive: (optional) True to search the event archive instead
                        of active events (default: False)
        @type  uid: string
        @param uid: (optional) Context for the query (default: None)
        @rtype:   generator
        @return:  Generator returning events.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "queryGenerator", [data])
        return create_response(resp)

    def reopen(self, evids=None, excludeIds=None, params=None, uid=None, asof=None, limit=None):
        """
        
        Reopen event(s).

        @type  evids: [string]
        @param evids: (optional) List of event IDs to reopen (default: None)
        @type  excludeIds: [string]
        @param excludeIds: (optional) List of event IDs to exclude from
                           reopen (default: None)
        @type  params: dictionary
        @param params: (optional) Key-value pair of filters for this search.
                       (default: None)
        @type  uid: string
        @param uid: (optional) Context for the query (default: None)
        @type  asof: float
        @param asof: (optional) Only reopen if there has been no state
                     change since this time (default: None)
        @type  limit: The maximum number of events to update in this batch.
        @param limit: (optional) Maximum number of events to update (Default: None).
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "reopen", [data])
        return create_response(resp)

    def setConfigValues(self, values):
        """
        
        @type  values: Dictionary
        @param values: Key Value pairs of config values
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "setConfigValues", [data])
        return create_response(resp)

    def unacknowledge(self, *args, **kwargs):
        """
        
        Deprecated, Use reopen
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "unacknowledge", [data])
        return create_response(resp)

    def updateEventSummaries(self, update, event_filter=None, exclusion_filter=None, limit=None):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "updateEventSummaries", [data])
        return create_response(resp)

    def write_log(self, evid=None, message=None):
        """
        
        Write a message to an event's log.

        @type  evid: string
        @param evid: Event ID to log to
        @type  message: string
        @param message: Message to log
        @rtype:   DirectResponse
        @return:  Success message
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "EventsRouter", "write_log", [data])
        return create_response(resp)

router.events = EventsRouter()

class DetailNavRouter(object):

    url_path = "detailnav_router"

    def getContextMenus(self, uid=None, menuIds=None):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DetailNavRouter", "getContextMenus", [data])
        return create_response(resp)

    def getDetailNavConfigs(self, uid=None, menuIds=None):
        """
        
        return a list of Detail navigation configurations. Can be used to create
        navigation links. Format is:
        {
        id: <id of the configuration>,
        'viewName': <view to display>,
        'xtype': <Ext type for the panel>,
        'text': <display name of the config info>
        }
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DetailNavRouter", "getDetailNavConfigs", [data])
        return create_response(resp)

    def getSecurityPermissions(self, uid):
        """
        
        returns a dictionary of all the permissions a
        user has on the context
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "DetailNavRouter", "getSecurityPermissions", [data])
        return create_response(resp)

router.detailnav = DetailNavRouter()

class ReportRouter(object):

    url_path = "report_router"

    def addNode(self, nodeType, contextUid, id):
        """
        
        Add a new report or report organizer.

        @type  nodeType: string
        @param nodeType: Type of new node. Can either be 'organizer' or one of
                         the report types returned from getReportTypes()
        @type  contextUid: string
        @param contextUid: The organizer where the new node should be added
        @type  id: string
        @param id: The new node's ID
        @rtype:   DirectResponse
        @return:  B{Properties}:
           - tree: (dictionary) Object representing the new Reports tree
           - newNode: (dictionary) Object representing the added node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "addNode", [data])
        return create_response(resp)

    def asyncGetTree(self, id=None):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "asyncGetTree", [data])
        return create_response(resp)

    def deleteNode(self, uid):
        """
        
        Remove a report or report organizer.

        @type  uid: string
        @param uid: The UID of the node to delete
        @rtype:   [dictionary]
        @return:  B{Properties}:
           - tree: (dictionary) Object representing the new Reports tree
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "deleteNode", [data])
        return create_response(resp)

    def getReportTypes(self):
        """
        
        Get the available report types.

        @rtype:   DirectResponse
        @return:  B{Properties}:
           - menuText: ([string]) Human readable list of report types
           - reportTypes: ([string]) A list of the available report types
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "getReportTypes", [data])
        return create_response(resp)

    def moveNode(self, uid, target):
        """
        
        Move a report or report organizer from one organizer to another.

        @type  uid: string
        @param uid: The UID of node to move
        @type  target: string
        @param target: The UID of the target Report organizer
        @rtype:   [dictionary]
        @return:  B{Properties}:
           - tree: (dictionary) Object representing the new Reports tree
           - newNode: (dictionary) Object representing the moved node
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "moveNode", [data])
        return create_response(resp)

    def moveOrganizer(self, targetUid, organizerUid):
        """
        
        Move the organizer uid to be underneath the organizer
        specified by the targetUid.

        @type  targetUid: string
        @param targetUid: New parent of the organizer
        @type  organizerUid: string
        @param organizerUid: The organizer to move
        @rtype:   DirectResponse
        @return:  B{Properties}:
             - data: (dictionary) Moved organizer
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "ReportRouter", "moveOrganizer", [data])
        return create_response(resp)

router.report = ReportRouter()

class SearchRouter(object):

    url_path = "search_router"

    def getAllResults(self, query, category='', start=0, limit=50, sort='excerpt', dir='ASC'):
        """
        
        Returns ISearchResultSnippets for the results of the query.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "getAllResults", [data])
        return create_response(resp)

    def getAllSavedSearches(self, query=None, addManageSavedSearch=False):
        """
        
        @returns [ISavedSearchInfo] All the searches the logged in
        user can access
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "getAllSavedSearches", [data])
        return create_response(resp)

    def getCategoryCounts(self, query):
        """
        
        Given a search term this queries each of the adapters for a
        list of categories and the counts of the returned results
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "getCategoryCounts", [data])
        return create_response(resp)

    def getLiveResults(self, query):
        """
        
        Returns IQuickSearchResultSnippets for the results of the query.
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "getLiveResults", [data])
        return create_response(resp)

    def getSavedSearch(self, searchName):
        """
        
        @params string searchName: identifier of the search we are looking for
        @return DirectResponse: the data attribute will have our search terms
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "getSavedSearch", [data])
        return create_response(resp)

    def noProvidersPresent(self):
        """
        None
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "noProvidersPresent", [data])
        return create_response(resp)

    def removeSavedSearch(self, searchName):
        """
        
        Removes the search specified by searchName
        @param string searchName
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "removeSavedSearch", [data])
        return create_response(resp)

    def saveSearch(self, queryString, searchName):
        """
        
        Adds this search to our collection of saved searches
        @param string queryString: term we are searching for
        @param string searchName: our query string's identifier
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "saveSearch", [data])
        return create_response(resp)

    def updateSavedSearch(self, searchName, queryString):
        """
        
        Updates the specified search with the new query
        @param string searchName: name of the search we want to update
        @param string query: value of the new query we are searching on
        
        """
        data = locals().copy()
        del data["self"]
        resp = client.make_request(self.url_path, "SearchRouter", "updateSavedSearch", [data])
        return create_response(resp)

router.search = SearchRouter()
